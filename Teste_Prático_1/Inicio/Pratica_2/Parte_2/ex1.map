Archive member included because of file (symbol)

/opt/pic32mx/lib/libc.a(putchar.o)
                              ex1.o (putchar)
/opt/pic32mx/lib/libc.a(_iob.o)
                              /opt/pic32mx/lib/libc.a(putchar.o) (_iob)
/opt/pic32mx/lib/libc.a(_fputc_simple.o)
                              /opt/pic32mx/lib/libc.a(putchar.o) (fputc)
/opt/pic32mx/lib/libc.a(write.o)
                              /opt/pic32mx/lib/libc.a(_fputc_simple.o) (write)
/opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
                              /opt/pic32mx/lib/libc.a(_fputc_simple.o) (_flsbuf)
/opt/pic32mx/lib/libc.a(_mon_putc.o)
                              /opt/pic32mx/lib/libc.a(write.o) (_mon_putc)
/opt/pic32mx/lib/libc.a(c32_uart.o)
                              /opt/pic32mx/lib/libc.a(_mon_putc.o) (__C32_UART)

Allocating common symbols
Common symbol       size              file

_sibuf              0x20              /opt/pic32mx/lib/libc.a(_iob.o)
_outdone            0x1               /opt/pic32mx/lib/libc.a(_iob.o)
_sobuf              0x20              /opt/pic32mx/lib/libc.a(_iob.o)

Microchip PIC32 Memory-Usage Report

kseg0 Program-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.text                   0x9d001400          0x568        1384  Application's executable code 
.rodata                 0x9d001968           0x18          24  Read-only constant data 
.data                   0x9d001980           0xa0         160  Data-initialization template 
.sdata                  0x9d001a20            0x8           8  Small data-initialization template 
      Total kseg0_program_mem used  :       0x628        1576  0.3% of 0x7ec00

kseg0 Boot-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.startup                0x9d001000          0x2b0         688  C startup code 
         Total kseg0_boot_mem used  :       0x2b0         688  68.3% of 0x3f0

Exception-Memory Usage 
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.app_excpt              0x9d000180           0x14          20  General-Exception handler 
          Total exception_mem used  :        0x14          20  0.5% of 0x1000

kseg1 Boot-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
         Total kseg1_boot_mem used  :           0           0  <1% of 0x490
        --------------------------------------------------------------------------
         Total Program Memory used  :       0x8ec        2284  0.4% of 0x80480
        --------------------------------------------------------------------------


kseg1 Data-Memory Usage
section                    address  length [bytes]      (dec)  Description
-------                 ----------  -------------------------  -----------
.data                   0xa0000000           0xa0         160  Initialized data 
.sdata                  0xa00000a0            0x8           8  Small initialized data 
.sbss                   0xa00000a8            0x1           1  Small uninitialized data 
.bss                    0xa00000ac           0x40          64  Uninitialized data 
.stack                  0xa00000f0         0x2000        8192  Minimum space reserved for stack 
         Total kseg1_data_mem used  :      0x20e9        8425  6.4% of 0x20000
        --------------------------------------------------------------------------
            Total Data Memory used  :      0x20e9        8425  6.4% of 0x20000
        --------------------------------------------------------------------------

Memory Configuration

Name             Origin             Length             Attributes
kseg0_program_mem 0x000000009d001400 0x000000000007ec00 xr
kseg0_boot_mem   0x000000009d001000 0x00000000000003f0
exception_mem    0x000000009d000000 0x0000000000001000
kseg1_boot_mem   0x00000000bfc00000 0x0000000000000490
debug_exec_mem   0x00000000bfc02000 0x0000000000000ff0
config3          0x00000000bfc02ff0 0x0000000000000004
config2          0x00000000bfc02ff4 0x0000000000000004
config1          0x00000000bfc02ff8 0x0000000000000004
config0          0x00000000bfc02ffc 0x0000000000000004
kseg1_data_mem   0x00000000a0000000 0x0000000000020000 w !x
sfrs             0x00000000bf800000 0x0000000000100000
*default*        0x0000000000000000 0xffffffffffffffff

Linker script and memory map

LOAD ex1.o
LOAD /opt/pic32mx/lib/libdetpic32.a
LOAD /opt/pic32mx/lib/gcc/pic32mx/3.4.4/libgcc.a
LOAD /opt/pic32mx/lib/libm.a
LOAD /opt/pic32mx/lib/libc.a
LOAD /opt/pic32mx/lib/libsupc++.a
LOAD /opt/pic32mx/lib/libxcpp.a
                0x0000000000000400                PROVIDE (_min_stack_size, 0x400)
                0x0000000000000000                PROVIDE (_min_heap_size, 0x0)
LOAD /opt/pic32mx/lib/startup.o
                0x0000000000000001                PROVIDE (_vector_spacing, 0x1)
                0x000000009d000000                _ebase_address = 0x9d000000
                0x0000000000000001                _vector_spacing = 0x1
                0x000000009d001800                _reset = 0x9d001800
                0x0000000000002000                _min_stack_size = 0x2000
                0x0000000000000000                _min_heap_size = 0x0
                0x00000000bfc00000                _RESET_ADDR = 0xbfc00000
                0x00000000bfc00380                _BEV_EXCPT_ADDR = 0xbfc00380
                0x00000000bfc00480                _DBG_EXCPT_ADDR = 0xbfc00480
                0x00000000bfc02000                _DBG_CODE_ADDR = 0xbfc02000
                0x000000009d000180                _GEN_EXCPT_ADDR = (_ebase_address + 0x180)

.config_BFC02FF0
 *(.config_BFC02FF0)

.config_BFC02FF4
 *(.config_BFC02FF4)

.config_BFC02FF8
 *(.config_BFC02FF8)

.config_BFC02FFC
 *(.config_BFC02FFC)

.startup        0x000000009d001000      0x2b0
 *(.startup)
 .startup       0x000000009d001000      0x2b0 /opt/pic32mx/lib/startup.o
                0x000000009d001000                startup
 *(.startup)

.reset
 *(.reset)

.bev_excpt
 *(.bev_handler)

.dbg_excpt      0x00000000bfc00480        0x0
                0x00000000bfc00480                . = (. + DEFINED (_DEBUGGER)?0x8:0x0)

.dbg_code       0x00000000bfc02000        0x0
                0x00000000bfc02000                . = (. + DEFINED (_DEBUGGER)?0xff0:0x0)

.app_excpt      0x000000009d000180       0x14
 *(.gen_handler)
 .gen_handler   0x000000009d000180       0x14 /opt/pic32mx/lib/startup.o

.vector_0       0x000000009d000200        0x0
 *(.vector_0)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_0) <= (_vector_spacing << 0x5))), function at exception vector 0 too large)

.vector_1       0x000000009d000220        0x0
 *(.vector_1)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_1) <= (_vector_spacing << 0x5))), function at exception vector 1 too large)

.vector_2       0x000000009d000240        0x0
 *(.vector_2)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_2) <= (_vector_spacing << 0x5))), function at exception vector 2 too large)

.vector_3       0x000000009d000260        0x0
 *(.vector_3)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_3) <= (_vector_spacing << 0x5))), function at exception vector 3 too large)

.vector_4       0x000000009d000280        0x0
 *(.vector_4)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_4) <= (_vector_spacing << 0x5))), function at exception vector 4 too large)

.vector_5       0x000000009d0002a0        0x0
 *(.vector_5)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_5) <= (_vector_spacing << 0x5))), function at exception vector 5 too large)

.vector_6       0x000000009d0002c0        0x0
 *(.vector_6)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_6) <= (_vector_spacing << 0x5))), function at exception vector 6 too large)

.vector_7       0x000000009d0002e0        0x0
 *(.vector_7)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_7) <= (_vector_spacing << 0x5))), function at exception vector 7 too large)

.vector_8       0x000000009d000300        0x0
 *(.vector_8)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_8) <= (_vector_spacing << 0x5))), function at exception vector 8 too large)

.vector_9       0x000000009d000320        0x0
 *(.vector_9)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_9) <= (_vector_spacing << 0x5))), function at exception vector 9 too large)

.vector_10      0x000000009d000340        0x0
 *(.vector_10)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_10) <= (_vector_spacing << 0x5))), function at exception vector 10 too large)

.vector_11      0x000000009d000360        0x0
 *(.vector_11)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_11) <= (_vector_spacing << 0x5))), function at exception vector 11 too large)

.vector_12      0x000000009d000380        0x0
 *(.vector_12)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_12) <= (_vector_spacing << 0x5))), function at exception vector 12 too large)

.vector_13      0x000000009d0003a0        0x0
 *(.vector_13)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_13) <= (_vector_spacing << 0x5))), function at exception vector 13 too large)

.vector_14      0x000000009d0003c0        0x0
 *(.vector_14)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_14) <= (_vector_spacing << 0x5))), function at exception vector 14 too large)

.vector_15      0x000000009d0003e0        0x0
 *(.vector_15)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_15) <= (_vector_spacing << 0x5))), function at exception vector 15 too large)

.vector_16      0x000000009d000400        0x0
 *(.vector_16)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_16) <= (_vector_spacing << 0x5))), function at exception vector 16 too large)

.vector_17      0x000000009d000420        0x0
 *(.vector_17)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_17) <= (_vector_spacing << 0x5))), function at exception vector 17 too large)

.vector_18      0x000000009d000440        0x0
 *(.vector_18)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_18) <= (_vector_spacing << 0x5))), function at exception vector 18 too large)

.vector_19      0x000000009d000460        0x0
 *(.vector_19)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_19) <= (_vector_spacing << 0x5))), function at exception vector 19 too large)

.vector_20      0x000000009d000480        0x0
 *(.vector_20)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_20) <= (_vector_spacing << 0x5))), function at exception vector 20 too large)

.vector_21      0x000000009d0004a0        0x0
 *(.vector_21)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_21) <= (_vector_spacing << 0x5))), function at exception vector 21 too large)

.vector_22      0x000000009d0004c0        0x0
 *(.vector_22)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_22) <= (_vector_spacing << 0x5))), function at exception vector 22 too large)

.vector_23      0x000000009d0004e0        0x0
 *(.vector_23)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_23) <= (_vector_spacing << 0x5))), function at exception vector 23 too large)

.vector_24      0x000000009d000500        0x0
 *(.vector_24)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_24) <= (_vector_spacing << 0x5))), function at exception vector 24 too large)

.vector_25      0x000000009d000520        0x0
 *(.vector_25)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_25) <= (_vector_spacing << 0x5))), function at exception vector 25 too large)

.vector_26      0x000000009d000540        0x0
 *(.vector_26)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_26) <= (_vector_spacing << 0x5))), function at exception vector 26 too large)

.vector_27      0x000000009d000560        0x0
 *(.vector_27)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_27) <= (_vector_spacing << 0x5))), function at exception vector 27 too large)

.vector_28      0x000000009d000580        0x0
 *(.vector_28)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_28) <= (_vector_spacing << 0x5))), function at exception vector 28 too large)

.vector_29      0x000000009d0005a0        0x0
 *(.vector_29)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_29) <= (_vector_spacing << 0x5))), function at exception vector 29 too large)

.vector_30      0x000000009d0005c0        0x0
 *(.vector_30)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_30) <= (_vector_spacing << 0x5))), function at exception vector 30 too large)

.vector_31      0x000000009d0005e0        0x0
 *(.vector_31)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_31) <= (_vector_spacing << 0x5))), function at exception vector 31 too large)

.vector_32      0x000000009d000600        0x0
 *(.vector_32)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_32) <= (_vector_spacing << 0x5))), function at exception vector 32 too large)

.vector_33      0x000000009d000620        0x0
 *(.vector_33)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_33) <= (_vector_spacing << 0x5))), function at exception vector 33 too large)

.vector_34      0x000000009d000640        0x0
 *(.vector_34)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_34) <= (_vector_spacing << 0x5))), function at exception vector 34 too large)

.vector_35      0x000000009d000660        0x0
 *(.vector_35)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_35) <= (_vector_spacing << 0x5))), function at exception vector 35 too large)

.vector_36      0x000000009d000680        0x0
 *(.vector_36)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_36) <= (_vector_spacing << 0x5))), function at exception vector 36 too large)

.vector_37      0x000000009d0006a0        0x0
 *(.vector_37)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_37) <= (_vector_spacing << 0x5))), function at exception vector 37 too large)

.vector_38      0x000000009d0006c0        0x0
 *(.vector_38)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_38) <= (_vector_spacing << 0x5))), function at exception vector 38 too large)

.vector_39      0x000000009d0006e0        0x0
 *(.vector_39)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_39) <= (_vector_spacing << 0x5))), function at exception vector 39 too large)

.vector_40      0x000000009d000700        0x0
 *(.vector_40)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_40) <= (_vector_spacing << 0x5))), function at exception vector 40 too large)

.vector_41      0x000000009d000720        0x0
 *(.vector_41)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_41) <= (_vector_spacing << 0x5))), function at exception vector 41 too large)

.vector_42      0x000000009d000740        0x0
 *(.vector_42)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_42) <= (_vector_spacing << 0x5))), function at exception vector 42 too large)

.vector_43      0x000000009d000760        0x0
 *(.vector_43)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_43) <= (_vector_spacing << 0x5))), function at exception vector 43 too large)

.vector_44      0x000000009d000780        0x0
 *(.vector_44)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_44) <= (_vector_spacing << 0x5))), function at exception vector 44 too large)

.vector_45      0x000000009d0007a0        0x0
 *(.vector_45)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_45) <= (_vector_spacing << 0x5))), function at exception vector 45 too large)

.vector_46      0x000000009d0007c0        0x0
 *(.vector_46)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_46) <= (_vector_spacing << 0x5))), function at exception vector 46 too large)

.vector_47      0x000000009d0007e0        0x0
 *(.vector_47)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_47) <= (_vector_spacing << 0x5))), function at exception vector 47 too large)

.vector_48      0x000000009d000800        0x0
 *(.vector_48)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_48) <= (_vector_spacing << 0x5))), function at exception vector 48 too large)

.vector_49      0x000000009d000820        0x0
 *(.vector_49)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_49) <= (_vector_spacing << 0x5))), function at exception vector 49 too large)

.vector_50      0x000000009d000840        0x0
 *(.vector_50)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_50) <= (_vector_spacing << 0x5))), function at exception vector 50 too large)

.vector_51      0x000000009d000860        0x0
 *(.vector_51)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_51) <= (_vector_spacing << 0x5))), function at exception vector 51 too large)

.vector_52      0x000000009d000880        0x0
 *(.vector_52)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_52) <= (_vector_spacing << 0x5))), function at exception vector 52 too large)

.vector_53      0x000000009d0008a0        0x0
 *(.vector_53)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_53) <= (_vector_spacing << 0x5))), function at exception vector 53 too large)

.vector_54      0x000000009d0008c0        0x0
 *(.vector_54)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_54) <= (_vector_spacing << 0x5))), function at exception vector 54 too large)

.vector_55      0x000000009d0008e0        0x0
 *(.vector_55)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_55) <= (_vector_spacing << 0x5))), function at exception vector 55 too large)

.vector_56      0x000000009d000900        0x0
 *(.vector_56)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_56) <= (_vector_spacing << 0x5))), function at exception vector 56 too large)

.vector_57      0x000000009d000920        0x0
 *(.vector_57)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_57) <= (_vector_spacing << 0x5))), function at exception vector 57 too large)

.vector_58      0x000000009d000940        0x0
 *(.vector_58)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_58) <= (_vector_spacing << 0x5))), function at exception vector 58 too large)

.vector_59      0x000000009d000960        0x0
 *(.vector_59)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_59) <= (_vector_spacing << 0x5))), function at exception vector 59 too large)

.vector_60      0x000000009d000980        0x0
 *(.vector_60)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_60) <= (_vector_spacing << 0x5))), function at exception vector 60 too large)

.vector_61      0x000000009d0009a0        0x0
 *(.vector_61)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_61) <= (_vector_spacing << 0x5))), function at exception vector 61 too large)

.vector_62      0x000000009d0009c0        0x0
 *(.vector_62)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_62) <= (_vector_spacing << 0x5))), function at exception vector 62 too large)

.vector_63      0x000000009d0009e0        0x0
 *(.vector_63)
                0x0000000000000001                ASSERT (((_vector_spacing == 0x0) || (SIZEOF (.vector_63) <= (_vector_spacing << 0x5))), function at exception vector 63 too large)

.text           0x000000009d001400      0x568
                0x000000009d001400                _text_begin = .
 *(.text .stub .text.* .gnu.linkonce.t.*)
 .text          0x000000009d001400       0xf0 ex1.o
                0x000000009d00143c                main
                0x000000009d001400                delay
 .text.putchar  0x000000009d0014f0        0xc /opt/pic32mx/lib/libc.a(putchar.o)
                0x000000009d0014f0                putchar
 .text.fputc    0x000000009d0014fc      0x144 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
                0x000000009d0014fc                fputc
 .text.write    0x000000009d001640       0xa8 /opt/pic32mx/lib/libc.a(write.o)
                0x000000009d001640                write
 .text._flsbuf  0x000000009d0016e8      0x12c /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
                0x000000009d0016e8                _flsbuf
 .text._mon_putc
                0x000000009d001814       0xa4 /opt/pic32mx/lib/libc.a(_mon_putc.o)
                0x000000009d001814                _mon_putc
 .text          0x000000009d0018b8       0xb0 /opt/pic32mx/lib/startup.o
                0x000000009d001928                printStr
                0x000000009d001908                printInt
                0x000000009d0018e8                readInt
                0x000000009d001960                resetCoreTimer
                0x000000009d0018d8                putChar
                0x000000009d001938                readStr
                0x000000009d001948                exxt
                0x000000009d001918                printInt10
                0x000000009d0018b8                inkey
                0x000000009d0018c8                getChar
                0x000000009d0018f8                readInt10
                0x000000009d001958                readCoreTimer
 *(.text.*personality*)
 *(.gnu.warning)
 *(.mips16.fn.*)
 *(.mips16.call.*)
                0x000000009d001968                _text_end = .

.rodata         0x000000009d001968       0x18
 *(.rodata .rodata.* .gnu.linkonce.r.*)
 .rodata        0x000000009d001968       0x15 /opt/pic32mx/lib/startup.o
 *(.rodata1)
                0x000000009d001980                . = ALIGN (0x4)
 *fill*         0x000000009d00197d        0x3 00

.sdata2         0x000000009d001980        0x0
 *(.sdata2 .sdata2.* .gnu.linkonce.s2.*)
                0x000000009d001980                . = ALIGN (0x4)

.sbss2          0x000000009d001980        0x0
 *(.sbss2 .sbss2.* .gnu.linkonce.sb2.*)
                0x000000009d001980                . = ALIGN (0x4)

.eh_frame_hdr
 *(.eh_frame_hdr)

.eh_frame
 *(.eh_frame)

.dbg_data       0x00000000a0000000        0x0
                0x00000000a0000000                . = (. + DEFINED (_DEBUGGER)?0x200:0x0)

.data           0x00000000a0000000       0xa0 load address 0x000000009d001980
                0x00000000a0000000                _data_begin = .
 *(.data .data.* .gnu.linkonce.d.*)
 .data          0x00000000a0000000       0xa0 /opt/pic32mx/lib/libc.a(_iob.o)
                0x00000000a0000000                _iob
 *(.gnu.linkonce.d.*personality*)
 *(.data1)
                0x000000009d001980                _data_image_begin = LOADADDR (.data)

.eh_frame
 *(.eh_frame)
                0x00000000a0008090                _gp = (ALIGN (0x10) + 0x7ff0)

.got
 *(.got.plt)
 *(.got)

.sdata          0x00000000a00000a0        0x8 load address 0x000000009d001a20
                0x00000000a00000a0                _sdata_begin = .
 *(.sdata .sdata.* .gnu.linkonce.s.*)
 .sdata         0x00000000a00000a0        0x4 /opt/pic32mx/lib/libc.a(_iob.o)
                0x00000000a00000a0                _Files
 .sdata         0x00000000a00000a4        0x4 /opt/pic32mx/lib/libc.a(c32_uart.o)
                0x00000000a00000a4                __C32_UART
                0x00000000a00000a8                _sdata_end = .

.lit8
 *(.lit8)

.lit4
 *(.lit4)
                0x00000000a00000a8                . = ALIGN (0x4)
                0x00000000a00000a8                _data_end = .
                0x00000000a00000a8                _bss_begin = .

.sbss           0x00000000a00000a8        0x1
                0x00000000a00000a8                _sbss_begin = .
 *(.dynsbss)
 *(.sbss .sbss.* .gnu.linkonce.sb.*)
 *(.scommon)
 .scommon       0x00000000a00000a8        0x1 /opt/pic32mx/lib/libc.a(_iob.o)
                0x00000000a00000a8                _outdone
                0x00000000a00000a9                _sbss_end = .

.bss            0x00000000a00000ac       0x40
 *(.dynbss)
 *(.bss .bss.* .gnu.linkonce.b.*)
 *(COMMON)
 COMMON         0x00000000a00000ac       0x40 /opt/pic32mx/lib/libc.a(_iob.o)
                0x00000000a00000ac                _sibuf
                0x00000000a00000cc                _sobuf
                0x00000000a00000ec                . = ALIGN (0x4)
                0x00000000a00000ec                . = ALIGN (0x4)
                0x00000000a00000ec                _end = .
                0x00000000a00000ec                _bss_end = .

.persist        0x00000000a00000ec        0x0
 *(.persist)
                0x00000000a00000ec                . = ALIGN (0x4)

.heap           0x00000000a00000ec        0x0
                0x00000000a00000ec                _heap = .
                0x00000000a00000ec                . = (. + _min_heap_size)

.stack          0x00000000a00000f0     0x2000
                0x00000000a00000f0                _splim = .
                0x00000000a00000f0                _SPLIM = .
                0x00000000a00020f0                . = (. + _min_stack_size)
 *fill*         0x00000000a00000f0     0x2000 00

.ramfunc        0x00000000a0002800        0x0 load address 0x000000009d001a28
                0x00000000a0002800                _ramfunc_begin = .
 *(.ramfunc .ramfunc.*)
                0x00000000a0002800                . = ALIGN (0x4)
                0x00000000a0002800                _ramfunc_end = .
                0x000000009d001a28                _ramfunc_image_begin = LOADADDR (.ramfunc)
                0x0000000000000000                _ramfunc_length = SIZEOF (.ramfunc)
                0x0000000000002800                _bmxdkpba_address = (_ramfunc_begin - 0xa0000000)
                0x0000000000020000                _bmxdudba_address = 0x20000
                0x0000000000020000                _bmxdupba_address = 0x20000
                0x00000000a0020000                _stack = (_ramfunc_length > 0x0)?(_ramfunc_begin - 0x4):0xa0020000
                0x0000000000000001                ASSERT (((_min_stack_size + _min_heap_size) <= (_stack - _heap)), Not enough space to allocate both stack and heap.  Reduce heap and/or stack size.)

.pdr            0x0000000000000000       0xe0
 *(.pdr)
 .pdr           0x0000000000000000       0x40 ex1.o
 .pdr           0x0000000000000040       0x20 /opt/pic32mx/lib/libc.a(putchar.o)
 .pdr           0x0000000000000060       0x20 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .pdr           0x0000000000000080       0x20 /opt/pic32mx/lib/libc.a(write.o)
 .pdr           0x00000000000000a0       0x20 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .pdr           0x00000000000000c0       0x20 /opt/pic32mx/lib/libc.a(_mon_putc.o)

.reginfo        0x0000000000000000       0x18
 *(.reginfo)
 .reginfo       0x0000000000000000       0x18 ex1.o

.stab
 *(.stab)

.stabstr
 *(.stabstr)

.stab.excl
 *(.stab.excl)

.stab.exclstr
 *(.stab.exclstr)

.stab.index
 *(.stab.index)

.stab.indexstr
 *(.stab.indexstr)

.comment        0x0000000000000000      0x268
 *(.comment)
 .comment       0x0000000000000000       0x4d ex1.o
 .comment       0x000000000000004d       0x4d /opt/pic32mx/lib/libc.a(putchar.o)
 .comment       0x000000000000009a       0x4d /opt/pic32mx/lib/libc.a(_iob.o)
 .comment       0x00000000000000e7       0x4d /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .comment       0x0000000000000134       0x4d /opt/pic32mx/lib/libc.a(write.o)
 .comment       0x0000000000000181       0x4d /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .comment       0x00000000000001ce       0x4d /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .comment       0x000000000000021b       0x4d /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug
 *(.debug)

.line
 *(.line)

.debug_srcinfo
 *(.debug_srcinfo)

.debug_sfnames
 *(.debug_sfnames)

.debug_aranges  0x0000000000000000       0xc8
 *(.debug_aranges)
 .debug_aranges
                0x0000000000000000       0x28 /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_aranges
                0x0000000000000028       0x28 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_aranges
                0x0000000000000050       0x28 /opt/pic32mx/lib/libc.a(write.o)
 .debug_aranges
                0x0000000000000078       0x28 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_aranges
                0x00000000000000a0       0x28 /opt/pic32mx/lib/libc.a(_mon_putc.o)

.debug_pubnames
                0x0000000000000000       0xfe
 *(.debug_pubnames)
 .debug_pubnames
                0x0000000000000000       0x1e /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_pubnames
                0x000000000000001e       0x49 /opt/pic32mx/lib/libc.a(_iob.o)
 .debug_pubnames
                0x0000000000000067       0x1c /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_pubnames
                0x0000000000000083       0x1c /opt/pic32mx/lib/libc.a(write.o)
 .debug_pubnames
                0x000000000000009f       0x1e /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_pubnames
                0x00000000000000bd       0x20 /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .debug_pubnames
                0x00000000000000dd       0x21 /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug_info     0x0000000000000000      0x65e
 *(.debug_info .gnu.linkonce.wi.*)
 .debug_info    0x0000000000000000      0x10c /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_info    0x000000000000010c      0x150 /opt/pic32mx/lib/libc.a(_iob.o)
 .debug_info    0x000000000000025c      0x12a /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_info    0x0000000000000386       0x7c /opt/pic32mx/lib/libc.a(write.o)
 .debug_info    0x0000000000000402      0x122 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_info    0x0000000000000524       0xfb /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .debug_info    0x000000000000061f       0x3f /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug_abbrev   0x0000000000000000      0x3ad
 *(.debug_abbrev)
 .debug_abbrev  0x0000000000000000       0xa5 /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_abbrev  0x00000000000000a5       0x81 /opt/pic32mx/lib/libc.a(_iob.o)
 .debug_abbrev  0x0000000000000126       0xb4 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_abbrev  0x00000000000001da       0x73 /opt/pic32mx/lib/libc.a(write.o)
 .debug_abbrev  0x000000000000024d       0xa7 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_abbrev  0x00000000000002f4       0x89 /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .debug_abbrev  0x000000000000037d       0x30 /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug_line     0x0000000000000000      0x899
 *(.debug_line)
 .debug_line    0x0000000000000000      0x1ab /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_line    0x00000000000001ab      0x196 /opt/pic32mx/lib/libc.a(_iob.o)
 .debug_line    0x0000000000000341      0x197 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_line    0x00000000000004d8       0xc2 /opt/pic32mx/lib/libc.a(write.o)
 .debug_line    0x000000000000059a      0x19d /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_line    0x0000000000000737       0xd3 /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .debug_line    0x000000000000080a       0x8f /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug_frame    0x0000000000000000       0xd0
 *(.debug_frame)
 .debug_frame   0x0000000000000000       0x20 /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_frame   0x0000000000000020       0x30 /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_frame   0x0000000000000050       0x34 /opt/pic32mx/lib/libc.a(write.o)
 .debug_frame   0x0000000000000084       0x2c /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_frame   0x00000000000000b0       0x20 /opt/pic32mx/lib/libc.a(_mon_putc.o)

.debug_str      0x0000000000000000      0x416
 *(.debug_str)
 .debug_str     0x0000000000000000      0x12a /opt/pic32mx/lib/libc.a(putchar.o)
                                        0x13c (size before relaxing)
 .debug_str     0x000000000000012a       0x89 /opt/pic32mx/lib/libc.a(_iob.o)
                                        0x14f (size before relaxing)
 .debug_str     0x00000000000001b3       0x7f /opt/pic32mx/lib/libc.a(_fputc_simple.o)
                                        0x149 (size before relaxing)
 .debug_str     0x0000000000000232       0x7c /opt/pic32mx/lib/libc.a(write.o)
                                         0xd6 (size before relaxing)
 .debug_str     0x00000000000002ae       0x18 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
                                        0x144 (size before relaxing)
 .debug_str     0x00000000000002c6       0xe1 /opt/pic32mx/lib/libc.a(_mon_putc.o)
                                        0x13a (size before relaxing)
 .debug_str     0x00000000000003a7       0x6f /opt/pic32mx/lib/libc.a(c32_uart.o)
                                         0xc1 (size before relaxing)

.debug_loc
 *(.debug_loc)

.debug_macinfo  0x0000000000000000     0x95fb
 *(.debug_macinfo)
 .debug_macinfo
                0x0000000000000000     0x1e51 /opt/pic32mx/lib/libc.a(putchar.o)
 .debug_macinfo
                0x0000000000001e51     0x1e4e /opt/pic32mx/lib/libc.a(_iob.o)
 .debug_macinfo
                0x0000000000003c9f     0x1e8f /opt/pic32mx/lib/libc.a(_fputc_simple.o)
 .debug_macinfo
                0x0000000000005b2e      0x92f /opt/pic32mx/lib/libc.a(write.o)
 .debug_macinfo
                0x000000000000645d     0x1eb3 /opt/pic32mx/lib/libc.a(_flsbuf_simple.o)
 .debug_macinfo
                0x0000000000008310      0x9bc /opt/pic32mx/lib/libc.a(_mon_putc.o)
 .debug_macinfo
                0x0000000000008ccc      0x92f /opt/pic32mx/lib/libc.a(c32_uart.o)

.debug_weaknames
 *(.debug_weaknames)

.debug_funcnames
 *(.debug_funcnames)

.debug_typenames
 *(.debug_typenames)

.debug_varnames
 *(.debug_varnames)

/DISCARD/
 *(.note.GNU-stack)
OUTPUT(ex1.elf elf32-tradlittlemips)

.mdebug.abi32   0x000000009d001a28        0x0

.rel.dyn        0x000000009d001a28        0x0
